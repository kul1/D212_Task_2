import sys
import os
import pandas as pd
import warnings
from utils.config_loader import load_config, import_flow_function, get_flow_function
from utils.directory_setup import setup_directories
from utils.clean_and_create_dummies import clean_and_create_dummies
from utils.visualizations import visualize_standardization, plot_scree_plot
from utils.pca_helpers import save_pca_loadings
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Ignore warnings
warnings.filterwarnings("ignore")

# Enable or disable detailed debug mode
debug_mode = True

def log_debug(message):
    """Logs messages only if debug_mode is True."""
    if debug_mode:
        print(message)

def main():
    # Step 1: Load configuration
    try:
        config = load_config()  # Dynamically load the configuration
        log_debug(f"Configuration loaded successfully: {config.__name__}")
    except Exception as e:
        print(f"Error loading configuration: {e}")
        sys.exit(1)

    # Step 2: Setup directories
    try:
        setup_directories(config)  # Ensure necessary directories exist
    except Exception as e:
        print(f"Error setting up directories: {e}")
        sys.exit(1)

    # Step 3: Load raw data
    try:
        data_file_path = os.path.join(config.RAW_DATA_DIR, config.RAW_DATA_FILE)
        data = pd.read_csv(data_file_path)
        print(f"\n### Step 3: Loading Raw Data from {config.RAW_DATA_FILE} ###")
        log_debug(f"Raw data loaded from {data_file_path}")
    except FileNotFoundError:
        print(f"Error: Raw data file not found at {data_file_path}")
        sys.exit(1)
    except Exception as e:
        print(f"Error loading raw data: {e}")
        sys.exit(1)

    # Step 4: Clean the data and create dummies
    try:
        data_with_dummies = clean_and_create_dummies(data, config)
        log_debug(f"\n### Data After Cleaning and Creating Dummies ###\n{data_with_dummies.head()}")
    except Exception as e:
        print(f"Error during data cleaning and dummy variable creation: {e}")
        sys.exit(1)

    # Print summary statistics for comparison
    print("\n### Summary Statistics for Prepared Data ###")
    print(data_with_dummies.describe(include='all'))

    # Step 5: Save the cleaned data
    try:
        prepared_data_file = os.path.join(config.PREPARED_DATA_DIR, config.PREPARED_DATA_FILE)
        data_with_dummies.to_csv(prepared_data_file, index=False)
        print(f"\n### Step 5: Data saved to {prepared_data_file} ###")
    except Exception as e:
        print(f"Error saving prepared data: {e}")
        sys.exit(1)

    # Step 6: Standardize the data for PCA
    print("\n### Step 6: Standardizing Data ###")
    try:
        feature_columns = [col for col in data_with_dummies.columns if col != config.TARGET_COLUMN]
        numeric_columns = data_with_dummies[feature_columns].select_dtypes(include=['number']).columns
        X = data_with_dummies[numeric_columns]

        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Visualize the distribution before and after standardization
        visualize_standardization(data_with_dummies, numeric_columns, X_scaled)
    except Exception as e:
        print(f"Error during data standardization: {e}")
        sys.exit(1)

    # Step 7: Perform PCA
    print("\n### Step 7: Performing PCA ###")
    try:
        pca = PCA(n_components=config.PCA_COMPONENTS_RETAINED)
        X_pca = pca.fit_transform(X_scaled)

        # Save PCA loadings
        save_pca_loadings(pca, numeric_columns, os.path.join(config.PREPARED_DATA_DIR, "pca_loadings.csv"))

        # Generate and save Scree Plot
        plot_scree_plot(
            X_scaled,
            os.path.join(config.PREPARED_DATA_DIR, "scree_plot.png")
        )
    except Exception as e:
        print(f"Error during PCA: {e}")
        sys.exit(1)

    # Step 8: Execute the analysis based on the loaded configuration
    try:
        flow_function_name = get_flow_function(config)  # Dynamically resolve flow function
        run_analysis = import_flow_function(flow_function_name)  # Import the function dynamically
        print(f"Flow function '{flow_function_name}' resolved and loaded successfully.")
    except Exception as e:
        print(f"Error resolving or importing flow function: {e}")
        sys.exit(1)

    # Step 9: Execute the analysis
    try:
        model = run_analysis(data_with_dummies, config)  # Call the analysis function
        print("\n### Analysis Completed Successfully ###")
    except Exception as e:
        print(f"Error during analysis execution: {e}")
        sys.exit(1)

    print("\n### End of Script ###")

if __name__ == "__main__":
    main()
